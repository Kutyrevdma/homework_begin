# Домашнее задание к лекции 1.4 «Циклы. Типы данных. Коллекции данных»
#
# Перед выполнением задания прочитайте короткую статью про типы данных.
#
# Подробно про списки
#
# Подробно про кортежи
#
# Подробно про множества
#
# Подробно про словари
#
# Используйте форматированный вывод (при помощи % или .format) при вызове print в домашней работе. В качестве подсказок можно использовать документацию:
#
# https://pyformat.info/
#
# https://docs.python.org/3/tutorial/inputoutput.html
# Задание №0
#
# Во время обучения вам будут доступны дополнительные файлы для домашних работ. Всех их вы можете скачать с этого репозитория.
# Далее мы будем к ним обращаться по названиям папок.
#
#     Эти файлы нужно склонировать к себе на компьютер.
#     Задание написано в комментариях в файле. Этот файл нужно дополнить своим кодом.
#
import csv

flats_list = list()

with open(r'E:\project\homework\task_4\1.4.cycles.datatypes\output.csv', newline='') as csvfile:
    flats_csv = csv.reader(csvfile, delimiter=';')
    flats_list = list(flats_csv)

print(type(flats_list))

# TODO 1:
# 1) Напишите цикл, который проходит по всем квартирам, и показывает только новостройки
# и их порядковые номера в файле. Подсказка - вам нужно изменить этот код:


# sum_flat = 0
# for i, flat in  enumerate(flats_list):
#     if "новостройка" in flat:
#         sum_flat += 1
#         print(f"Порядковый номер в файле: {i}")
#         print("ID новостройки: {}\n".format(flat[0]))
# # 2) добавьте в код подсчет количества новостроек
# print(f'Количество новостроек: {sum_flat + 1} ')
# print(type(flat[0]))
# print(type(sum_flat))

# TODO 2:
# 1) Сделайте описание квартиры в виде словаря, а не списка. Используйте следующие поля из файла output.csv: ID, Количество комнат;Новостройка/вторичка, Цена (руб). У вас должно получиться примерно так:


# flats_dicts = {}
# for flat in flats_list:
#     flats_dicts = {"id":flat[0], "rooms":flat[1], "type":flat[2], "price":flat[11]}
#     print('У метро: {}\n'.format(flat[3].replace("м.", "")))
#     for key_flat, item_flat in flats_dicts.items():
#         print(f'{key_flat} - {item_flat}')
#     print()
#     # print('Описание квартиры: {}'.items())
# print(f'Тип до {type(flats_list)}\nТип после - {type(flats_dicts)}')


# 2) Измените код, который создавал словарь для поиска квартир по метро так, чтобы значением словаря был не список ID квартир, а список описаний квартир в виде словаря, который вы сделали в п.1

# 3) Самостоятельно напишите код, который подсчитывает и выводит, сколько квартир нашлось у каждого метро.


# flats_dicts = {}
# subway_dict = {}
# for flat in flats_list:
#   flats_dicts = {"rooms":flat[1], "type":flat[2]}
#   subway = flat[3].replace("м.", "")
#   if subway not in subway_dict.keys():
#     subway_dict[subway] = list()
#   subway_dict[subway].append(flats_dicts)
# for subway_keys, subway_values in subway_dict.items():
#     print(f'')
#     print(f'{subway_keys}\nКвартир у метро: {len(subway_values)} шт.\n{subway_values}\n')

# print(type(subway_dict))
# print(type(subway))
# print(type(subway_keys))
# print(type(flats_dicts))
# ------------------------------------------------------------------------------------------------------ #
# Задача №1. Понимание типов данных.
#
# Придумайте по одному примеру использования каждого типа данных: list, tuple, set, dictionary. Например, при помощи
# словаря мы можем не только делать быстрый поиск квартир (как в лекции), но и хранить "записную книжку":
#
# contact = {
#             'name': 'Елена Никитина',
#             'mobile_phone': '+7**********',
#             'organization': 'Нетология',
#             'courses': 1
#             }
#
# Пример нужно оформить на repl.it.
# Задача №2. Развитие навыков программирования.
#
# Пример для list. Список группы студентов

students_group_101 = list()
group_students = ['Миша', 'Катя', 'Лиза', 'Маша', 'Гриша']
print(group_students)

# Пример для tuple. Список аудиторий

classroom = ('Аудитория 1', 'Аудитория 2', 'Аудитория 3')
print(classroom)

# Пример для set. У кого в группе одинаковые имена

group_students_1 = {'Миша', 'Катя', 'Лиза', 'Маша', 'Гриша', 'Гриша'}
group_students_2 = {'Лиза', 'Оля', 'Вика''Лиза', 'Маша'}

print(group_students_1.intersection(group_students_2))

# Пример для dictionary. Дни рождения.

birth = {
    'Миша': '18.01.1978',
    'Катя': '14.11.1977',
    'Лиза': '11.11.1982'
}

print(birth)
# Вы уже хорошо знакомы с циклами и условиями. Пользуясь знаниями, научитесь отображать различную информацию из
# массива данных по квартирам и попробуйте поработать с множествами и словарями. Задание с файлами в папке в
# 1.4.cycles.datatypes. Потренируйтесь проверять, какой тип у вас получается, функцией type(). Задача №3
#
# Для подготовки к следующей лекции прочитайте про функции
